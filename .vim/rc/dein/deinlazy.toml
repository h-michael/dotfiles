# Language Server Protocol (LSP) support for vim and neovim.
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'make release'
on_ft = [
  'rust',
  'ruby',
  'c',
  'cpp',
  'dart',
  'go',
  'javascript',
  'javascript.jsx',
  'purescript',
  'haskell',
  'ocaml',
  'python',
  'Dockerfile'
]
hook_post_update = 'UpdateRemotePlugins'
hook_source = '''
  set hidden
  set completefunc=LanguageClient#complete
  let g:LanguageClient_diagnosticsEnable = 0
  let g:LanguageClient_selectionUI = 'fzf'
  let g:LanguageClient_serverCommands = {
      \ 'rust': ['env', 'RUST_LOG=info', 'rustup', 'run', 'nightly', 'rls'],
      \ 'c': ['clangd'],
      \ 'cpp': ['clangd'],
      \ 'dart': ['dart_language_server'],
      \ 'go': ['gopls'],
      \ 'javascript': [g:current_flow_path, 'lsp'],
      \ 'javascript.jsx': [g:current_flow_path, 'lsp'],
      \ 'haskell': ['hie', '--lsp'],
      \ 'ocaml': ['ocaml-language-server', '--stdio'],
      \ 'python': ['pyls'],
      \ 'Dockerfile': ['docker-langserver', '--stdio']
      \ }

      " \ 'ruby': ['solargraph', 'stdio'],
      " \ 'rust': ['ra_lsp_server'],
      " \ 'rust': ['env', 'RUST_LOG=info', 'rustup', 'run', 'nightly', 'rls'],
      " \ 'rust': ['env', 'RUST_LOG=info', '/home/h-michael/ghq/github.com/h-michael/rls/target/release/rls'],
      " \ 'rust': ['env', 'RUST_LOG=gen_lsp_server=debug', 'ra_lsp_server'],

  " let g:LanguageClient_rootMarkers = {
  "     \ 'javascript': ['package.json'],
  "     \ 'rust': ['Cargo.toml'],
  "     \ 'ruby': ['Gemfile']
  "     \ }

  let g:LanguageClient_useFloatingHover = 0
  let g:LanguageClient_loadSettings = 1 " Use an absolute configuration path if you want system-wide settings
  let g:LanguageClient_settingsPath = '~/.config/nvim/settings.json'
  let g:LanguageClient_completionPreferTextEdit = 1

  " set formatexpr=LanguageClient#textDocument_rangeFormatting_sync()

  nnoremap <silent> ;lh  :call LanguageClient_textDocument_hover()<CR>
  nnoremap <silent> ;jd  :call LanguageClient_textDocument_definition()<CR>
  nnoremap <silent> ;jt  :call LanguageClient_textDocument_typeDefinition()<CR>
  nnoremap <silent> ;ji  :call LanguageClient_textDocument_implementation()<CR>
  nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
  nnoremap <silent> ;jr  :call LanguageClient_textDocument_references()<CR>
  nnoremap <silent> ;ft  :call LanguageClient_textDocument_formatting()<CR>
  nnoremap <silent> ;ftr :call LanguageClient_textDocument_rangeFormatting()<CR>
  nnoremap <silent> ;sy  :call LanguageClient_textDocument_documentSymbol()<CR>
  nnoremap <silent> ;sa  :call LanguageClient_textDocument_codeAction()<CR>

  " let g:LanguageClient_loggingLevel='DEBUG'
  let g:LanguageClient_loggingLevel = 'INFO'
  let g:LanguageClient_loggingFile =  expand('~/.local/share/nvim/LanguageClient.log')
  let g:LanguageClient_serverStderr = expand('~/.local/share/nvim/LanguageServer.log')

  function! SwitchStableRls() abort
    if (&ft=='rust')
      LanguageClientStop
      ALEStopAllLSPs
      let g:ale_rust_rls_toolchain = 'stable'
      let g:LanguageClient_serverCommands.rust = ['rustup', 'run', 'stable', 'rls']
      sleep 100m
      LanguageClientStart
    endif
  endfunction

  function! SwitchNightlyRls() abort
    if (&ft=='rust')
      LanguageClientStop
      ALEStopAllLSPs
      let g:ale_rust_rls_toolchain = 'nightly'
      let g:LanguageClient_serverCommands.rust = ['rustup', 'run', 'nightly', 'rls']
      sleep 100m
      LanguageClientStart
    endif
  endfunction

  command! SwitchStableRls :call SwitchStableRls()
  command! SwitchNightlyRls :call SwitchNightlyRls()

  function! LspMaybeHover(is_running) abort
    if a:is_running.result && g:LanguageClient_autoHoverAndHighlightStatus
      call LanguageClient_textDocument_hover()
    endif
  endfunction

  function! LspMaybeHighlight(is_running) abort
    if a:is_running.result && g:LanguageClient_autoHoverAndHighlightStatus
      call LanguageClient#textDocument_documentHighlight()
    endif
  endfunction

  augroup lsp_aucommands
    au!
    au CursorHold * call LanguageClient#isAlive(function('LspMaybeHover'))
    au CursorMoved * call LanguageClient#isAlive(function('LspMaybeHighlight'))
  augroup END

  let g:LanguageClient_autoHoverAndHighlightStatus = 0

  function! ToggleLspAutoHoverAndHilight() abort
    if g:LanguageClient_autoHoverAndHighlightStatus
      let g:LanguageClient_autoHoverAndHighlightStatus = 0
      call LanguageClient#clearDocumentHighlight()
      echo ""
    else
      let g:LanguageClient_autoHoverAndHighlightStatus = 1
    end
  endfunction
  nnoremap <silent> ;tg  :call ToggleLspAutoHoverAndHilight()<CR>
  function! HandleWindowProgress(params) abort
      echomsg json_encode(a:params)
  endfunction
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim'
depends = ['deoplete.nvim']
on_source = 'deoplete.nvim'
if = 'has("nvim")'
hook_add = '''
  let g:float_preview#docked = 0
'''

[[plugins]]
repo = 'w0rp/ale'
on_event = 'BufRead'
hook_add = 'source ~/.vim/rc/dein/plugins/ale.rc.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
hook_post_update = 'UpdateRemotePlugins'
on_cmd = 'DeinUpdate'

# utility comamnds of dein.vim with rich completion.
[[plugins]]
repo = 'haya14busa/dein-command.vim'
# hook_post_update = 'UpdateRemotePlugins'
on_cmd = 'Dein'

# Benchmarck
[[plugins]]
repo = 'tweekmonster/startuptime.vim'
on_cmd = 'StartupTime'

[[plugins]]
repo = 'mattn/benchvimrc-vim'
on_cmd = 'BenchVimrc'

# The vim source for neocomplete/deoplete
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

# Syntax source for neocomplete/deoplete
[[plugins]]
repo = 'Shougo/neco-syntax'
on_event = 'InsertEnter'

[[plugins]]
repo = 'ujihisa/neco-look'
on_event = 'InsertEnter'

# can edit vinari
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_source = 'let g:vinarise_enable_auto_detect = 1'

# A secure alternative to Vim modelines
[[plugins]]
repo = 'ciaranm/securemodelines'
on_event = 'BufRead'

# endwise.vim: wisely add "end" in ruby, endfunction/endif/more in vim script, etc
[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ['ruby']

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TabbarToggle', 'TagbarOpen']
hook_add = '''
  nnoremap <silent> ;tb :TagbarToggle<CR>
'''

# simple memo plugin for Vim.
[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList', 'MemoGrep']
hook_add = '''
  map <Leader>mn  :MemoNew<CR>
  map <Leader>ml  :MemoList<CR>
  map <Leader>mg  :MemoGrep<CR>
'''

[[plugins]]
repo = 'thinca/vim-scouter'
on_cmd = ['Scouter', 'Scouter!']
