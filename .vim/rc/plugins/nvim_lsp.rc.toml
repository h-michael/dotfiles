[[plugins]]
repo = 'neovim/nvim-lsp'
# repo = 'h-michael/nvim-lsp'
# rev = ''
on_if = 'has("nvim-0.5")'
on_cmd = ['LspInstall', 'LspInstallInfo']
on_ft = [
  'c', 'cpp', 'go', 'rust' , 'python', 'ruby',
  'lua', 'javascript', 'typescript', 'graphql',
  'json', 'yaml', 'yaml.docker-compose', 'terraform'
]
hook_add = '''
lua << EOF
  vim.lsp.set_log_level("debug")
  vim.api.nvim_set_var("enable_nvim_lsp_diagnostics", true)

  vim.lsp.callbacks['textDocument/publishDiagnostics'] = function(_, _, result)
    if vim.api.nvim_get_var('enable_nvim_lsp_diagnostics') then
      local util = vim.lsp.util

      if not result then return end
      local uri = result.uri
      local bufnr = vim.uri_to_bufnr(uri)
      if not bufnr then
        err_message("LSP.publishDiagnostics: Couldn't find buffer for ", uri)
        return
      end
      util.buf_clear_diagnostics(bufnr)
      util.buf_diagnostics_save_positions(bufnr, result.diagnostics)
      util.buf_diagnostics_underline(bufnr, result.diagnostics)
      -- util.buf_diagnostics_virtual_text(bufnr, result.diagnostics)
      -- util.set_loclist(result.diagnostics)
    end
  end

  -- vim.lsp.callbacks['textDocument/documentSymbol'] = function(_, _, result)
  --   vim.api.nvim_command("echo ('"..vim.inspect(result).."')")
  -- end
EOF

function! LanguageClientStatus() abort
  echo luaeval("vim.inspect(vim.lsp.get_client_by_id(1))")
endfunction

function! ToggleDiagnosics() abort
lua << EOF
  if vim.api.nvim_get_var("enable_nvim_lsp_diagnostics") then
    vim.lsp.util.buf_clear_diagnostics()
    diagnostic_ns = vim.api.nvim_create_namespace("vim_lsp_diagnostics")
  end
  vim.api.nvim_set_var("enable_nvim_lsp_diagnostics", not vim.api.nvim_get_var("enable_nvim_lsp_diagnostics"))
EOF
endfunction

function! SetMyLspConfig() abort
  setlocal omnifunc=v:lua.vim.lsp.omnifunc
  nnoremap <silent> <c-]>      <cmd>lua vim.lsp.buf.definition()<CR>
  nnoremap <silent> <c-k>      <cmd>lua vim.lsp.buf.signature_help()<CR>
  nnoremap <silent> K          <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <silent> gd         <cmd>lua vim.lsp.buf.declaration()<CR>
  nnoremap <silent> g0         <cmd>lua vim.lsp.buf.document_symbol()<CR>
  nnoremap <silent> gD         <cmd>lua vim.lsp.buf.implementation()<CR>
  nnoremap <silent> 1gD        <cmd>lua vim.lsp.buf.type_definition()<CR>
  nnoremap <silent><Leader>rf  <cmd>lua vim.lsp.buf.references({ includeDeclaration = true })<CR>
  nnoremap <silent><Leader>fmt <cmd>lua vim.lsp.buf.formatting()<CR>
endfunction
'''

[plugins.ftplugin]
c = '''
if exists('g:my_c_lsp_loaded')
    finish
else
  let g:my_c_lsp_loaded = 1

  call SetMyLspConfig()
  lua require'nvim_lsp'.clangd.setup{}
endif
'''

cpp = '''
if !exists('g:my_cpp_lsp_loaded')
  let g:my_cpp_lsp_loaded = 1

  lua require'nvim_lsp'.clangd.setup{}
endif
'''

go = '''
if !exists('g:my_go_lsp_loaded')
  let g:my_go_lsp_loaded = 1
  let g:use_gopls = 1

  if exists('g:use_gopls')
    call SetMyLspConfig()
    lua << EOF
      -- https://github.com/golang/tools/blob/master/gopls/doc/settings.md#settings
      require'nvim_lsp'.gopls.setup{
        init_options = {
          usePlaceholders=true;
          linkTarget="pkg.go.dev";
          completionDocumentation=true;
          completeUnimported=true;
          deepCompletion=true;
          fuzzyMatching=true;
        };
      }
EOF
  endif
endif
'''

rust = '''
if !exists('g:my_rust_lsp_loaded')
let g:my_rust_lsp_loaded = 1

call SetMyLspConfig()
" let g:use_rust_analyzer = 1

  if !exists('g:use_rust_analyzer')
    lua << EOF
      -- https://github.com/neovim/nvim-lsp#rls
      require'nvim_lsp'.rls.setup{
        cmd = {"rustup", "run", "nightly", "rls"};
        settings = {
          rust = {
            all_features = true;
            all_targets = true;
            full_docs = true;
            jobs = 2;
            unstable_features = true;
            wait_to_build = 1500;
          };
        };
      }
EOF
  else
    lua require'nvim_lsp'.rust_analyzer.setup{}
  endif
endif
'''

ruby = '''
if !exists('g:my_ruby_lsp_loaded')
  let g:my_ruby_lsp_loaded = 1

  call SetMyLspConfig()
  lua require'nvim_lsp'.solargraph.setup{}
endif
'''

python = '''
if !exists('g:my_python_lsp_loaded')
  let g:my_python_lsp_loaded = 1

  call SetMyLspConfig()
  lua require'nvim_lsp'.pyls.setup{}
endif
'''

lua = '''
if !exists('g:my_lua_lsp_loaded')
  let g:my_lua_lsp_loaded = 1

  call SetMyLspConfig()
  lua << EOF
    local os_getenv = vim.loop.os_getenv;
    require'nvim_lsp'.sumneko_lua.setup{
      cmd = {os_getenv('LUA_LSP_BIN'), "-E", os_getenv('LUA_LSP_DIR')..'/main.lua'};
      settings = {
        lua = {
          diagnostics = {
            enable = false
          };
        };
      };
    }
EOF
endif
'''

javascript = '''
if !exists('g:my_javascript_lsp_loaded')
  let g:my_javascript_lsp_loaded = 1

  call SetMyLspConfig()
  lua << EOF
    -- https://github.com/neovim/nvim-lsp#flow
    require'nvim_lsp'.apollols.setup{}
EOF
endif
'''

typescript = '''
if !exists('g:my_typescript_lsp_loaded')
  let g:my_typescript_lsp_loaded = 1

  call SetMyLspConfig()
  lua require'nvim_lsp'.tsserver.setup{}
endif
'''

graphql = '''
if !exists('g:my_javascript_lsp_loaded')
  let g:my_javascript_lsp_loaded = 1

  call SetMyLspConfig()
  lua << EOF
    -- https://github.com/neovim/nvim-lsp#flow
    require'nvim_lsp'.apollols.setup{}
EOF
endif
'''

json = '''
if !exists('g:my_json_lsp_loaded')
  let g:my_json_lsp_loaded = 1

  call SetMyLspConfig()
  lua require'nvim_lsp'.jsonls.setup{}
endif
'''

yaml = '''
if !exists('g:my_yaml_lsp_loaded')
  let g:my_yaml_lsp_loaded = 1

  call SetMyLspConfig()
  lua require'nvim_lsp'.yamlls.setup{}
endif
'''

# "yaml.docker-compose" = '''
# call SetMyLspConfig()
# lua require'nvim_lsp'.yamlls.setup{}
# '''

terraform = '''
if !exists('g:my_terraform_lsp_loaded')
  let g:my_terraform_lsp_loaded = 1

  call SetMyLspConfig()
  lua require'nvim_lsp'.terrafomls.setup{}
endif
'''
