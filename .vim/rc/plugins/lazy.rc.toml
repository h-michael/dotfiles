[[plugins]]
repo = 'w0rp/ale'
on_event = 'BufRead'
hook_add = '''
" if has('nvim-0.3.2')
"   let g:ale_virtualtext_cursor = 1
"   let g:ale_echo_cursor= 0
"   highlight! link ALEVirtualTextError ErrorMsg
"   highlight! link ALEVirtualTextWarning WarningMsg
" else
"   let g:ale_set_balloons_legacy_echo = 1
"   let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" endif
let g:ale_disable_lsp = 0
let g:ale_set_balloons_legacy_echo = 1
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" let g:ale_sign_column_always = 1
" let g:ale_sign_error = 'E'
" let g:ale_sign_warning = 'W'
" let g:ale_sign_error = '✖'
" let g:ale_sign_warning = '⚠'
" let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_warning_str = 'W'

let g:ale_javascript_eslint_executable = nrun#Which('eslint')
let g:ale_javascript_flow_executable = nrun#Which('flow')
let g:ale_javascript_prettier_executable = nrun#Which('flow')
let g:ale_ruby_rubocop_executable = 'bundle'

let g:ale_linters = {
\   'ruby': ['rubocop'],
\   'rust': ['cargo'],
\   'javascript': ['eslint', 'flow'],
\   'javascript.jsx': ['eslint', 'flow'],
\   'jsx': ['eslint', 'flow'],
\   'haskell': ['hie', '--lsp'],
\}
let g:ale_fixers = {
\   'rust': 'rustfmt',
\   'javascript': 'eslint',
\   'javascript.jsx': 'eslint',
\   'jsx': 'eslint',
\}

nnoremap <silent> <Leader>af :<C-u>ALEFix <CR>

let g:ale_javascript_prettier_use_local_config = 1
let g:ale_rust_cargo_use_clippy = 1
let g:ale_rust_rls_toolchain = 'nightly'
" let g:ale_rust_rls_toolchain = 'stable'

" let g:ale_fix_on_save = 1
" let b:ale_set_balloons = 1
'''

# utility comamnds of dein.vim with rich completion.
[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'

# Benchmarck
[[plugins]]
repo = 'tweekmonster/startuptime.vim'
on_cmd = 'StartupTime'

# can edit vinari
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_source = 'let g:vinarise_enable_auto_detect = 1'

# A secure alternative to Vim modelines
[[plugins]]
repo = 'ciaranm/securemodelines'
on_event = 'BufRead'

# endwise.vim: wisely add "end" in ruby, endfunction/endif/more in vim script, etc
[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ['ruby']

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TabbarToggle', 'TagbarOpen']
hook_add = '''
nnoremap <silent> <Leader>tb :TagbarToggle<CR>
'''

# simple memo plugin for Vim.
[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList', 'MemoGrep']
hook_add = '''
map <Leader>mn  :MemoNew<CR>
map <Leader>ml  :MemoList<CR>
map <Leader>mg  :MemoGrep<CR>
'''

# The fastest Neovim colorizer.
[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_cmd = ['ColorizerAttachToBuffer', 'ColorizerDetachFromBuffer', 'ColorizerReloadAllBuffers']
on_if = 'has("nvim-0.4")'
hook_source = '''
set termguicolors
lua require'colorizer'.setup()
'''

# Vim plugin: Highlight columns in CSV and TSV files and run queries in SQL-like language
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
let g:rustfmt_autosave = 0
let g:rust_fold = 1
'''

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'help'

[[plugins]]
repo = 'neovim/nvim-lsp'
# repo = 'h-michael/nvim-lsp'
# rev = ''
on_if = 'has("nvim-0.5")'
on_cmd = ['LspInstall', 'LspInstallInfo']
on_ft = [
  'c', 'cpp', 'go', 'rust' , 'python', 'ruby',
  'lua', 'javascript', 'typescript',
  'json', 'yaml', 'yaml.docker-compose'
]
hook_add = '''

lua << EOF
  vim.lsp.set_log_level("debug")
  vim.api.nvim_set_var("enable_nvim_lsp_diagnostics", true)

  vim.lsp.callbacks['textDocument/publishDiagnostics'] = function(_, _, result)
    if vim.api.nvim_get_var('enable_nvim_lsp_diagnostics') then
      local util = vim.lsp.util

      if not result then return end
      local uri = result.uri
      local bufnr = vim.uri_to_bufnr(uri)
      if not bufnr then
        err_message("LSP.publishDiagnostics: Couldn't find buffer for ", uri)
        return
      end
      util.buf_clear_diagnostics(bufnr)
      util.buf_diagnostics_save_positions(bufnr, result.diagnostics)
      util.buf_diagnostics_underline(bufnr, result.diagnostics)
      util.buf_diagnostics_virtual_text(bufnr, result.diagnostics)
    end
  end
EOF

function! ToggleDiagnosics() abort
lua << EOF
  if vim.api.nvim_get_var("enable_nvim_lsp_diagnostics") then
    vim.lsp.util.buf_clear_diagnostics()
    diagnostic_ns = vim.api.nvim_create_namespace("vim_lsp_diagnostics")
  end
  vim.api.nvim_set_var("enable_nvim_lsp_diagnostics", not vim.api.nvim_get_var("enable_nvim_lsp_diagnostics"))
EOF
endfunction

function! SetMyLspConfig() abort
  setlocal omnifunc=v:lua.vim.lsp.omnifunc
  nnoremap <silent> <c-]>      <cmd>lua vim.lsp.buf.definition()<CR>
  nnoremap <silent> <c-k>      <cmd>lua vim.lsp.buf.signature_help()<CR>
  nnoremap <silent> K          <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <silent> gd         <cmd>lua vim.lsp.buf.declaration()<CR>
  nnoremap <silent> gD         <cmd>lua vim.lsp.buf.implementation()<CR>
  nnoremap <silent> 1gD        <cmd>lua vim.lsp.buf.type_definition()<CR>
  nnoremap <silent><Leader>rf  <cmd>lua vim.lsp.buf.references({ includeDeclaration = true })<CR>
  nnoremap <silent><Leader>fmt <cmd>lua vim.lsp.buf.formatting()<CR>
endfunction
'''

[plugins.ftplugin]
c = '''
call SetMyLspConfig()
lua require'nvim_lsp'.clangd.setup{}
'''

cpp = '''
lua require'nvim_lsp'.clangd.setup{}
'''

go = '''
call SetMyLspConfig()
lua << EOF
  -- https://github.com/golang/tools/blob/master/gopls/doc/settings.md#settings
  require'nvim_lsp'.gopls.setup{
    init_options = {
      usePlaceholders=true;
      linkTarget="pkg.go.dev";
      completionDocumentation=true;
      completeUnimported=true;
      deepCompletion=true;
      fuzzyMatching=true;
    };
  }
EOF
'''

rust = '''
call SetMyLspConfig()
lua << EOF
  -- https://github.com/neovim/nvim-lsp#rls
  require'nvim_lsp'.rls.setup{
    cmd = {"rustup", "run", "nightly", "rls"};
    settings = {
      rls = {
        enableMultiProjectSetup = true;
        all_features = true;
        all_targets = true;
        full_docs = true;
        jobs = 2;
        unstable_features = true;
        wait_to_build = 1500;
      };
    };
  }
EOF
'''

ruby = '''
call SetMyLspConfig()
lua require'nvim_lsp'.solargraph.setup{}
'''

lua = '''
call SetMyLspConfig()
lua << EOF
  local os_getenv = vim.loop.os_getenv;
  require'nvim_lsp'.sumneko_lua.setup{
    cmd = {os_getenv('LUA_LSP_BIN'), "-E", os_getenv('LUA_LSP_DIR')..'/main.lua'};
    settings = {
      lua = {
        diagnostics = {
          enable = false
        };
      };
    };
  }
EOF
'''

javascript = '''
call SetMyLspConfig()
lua << EOF
  -- https://github.com/neovim/nvim-lsp#flow
  require'nvim_lsp'.flow.setup{}
EOF
'''

typescript = '''
call SetMyLspConfig()
lua require'nvim_lsp'.tsserver.setup{}
'''

json = '''
" call SetMyLspConfig()
" lua require'nvim_lsp'.jsonls.setup{}
'''

yaml = '''
" call SetMyLspConfig()
" lua require'nvim_lsp'.yamlls.setup{}
'''

# "yaml.docker-compose" = '''
# call SetMyLspConfig()
# lua require'nvim_lsp'.yamlls.setup{}
# '''
